// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/alphagov/paas-sqs-broker/sqs"
)

type FakeClient struct {
	CreateStackStub        func(context.Context, string, string, sqs.QueueParams) error
	createStackMutex       sync.RWMutex
	createStackArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 sqs.QueueParams
	}
	createStackReturns struct {
		result1 error
	}
	createStackReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStackStub        func(context.Context, string) error
	deleteStackMutex       sync.RWMutex
	deleteStackArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteStackReturns struct {
		result1 error
	}
	deleteStackReturnsOnCall map[int]struct {
		result1 error
	}
	GetStackStatusStub        func(context.Context, string) (string, error)
	getStackStatusMutex       sync.RWMutex
	getStackStatusArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getStackStatusReturns struct {
		result1 string
		result2 error
	}
	getStackStatusReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CreateStack(arg1 context.Context, arg2 string, arg3 string, arg4 sqs.QueueParams) error {
	fake.createStackMutex.Lock()
	ret, specificReturn := fake.createStackReturnsOnCall[len(fake.createStackArgsForCall)]
	fake.createStackArgsForCall = append(fake.createStackArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 sqs.QueueParams
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("CreateStack", []interface{}{arg1, arg2, arg3, arg4})
	fake.createStackMutex.Unlock()
	if fake.CreateStackStub != nil {
		return fake.CreateStackStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createStackReturns
	return fakeReturns.result1
}

func (fake *FakeClient) CreateStackCallCount() int {
	fake.createStackMutex.RLock()
	defer fake.createStackMutex.RUnlock()
	return len(fake.createStackArgsForCall)
}

func (fake *FakeClient) CreateStackCalls(stub func(context.Context, string, string, sqs.QueueParams) error) {
	fake.createStackMutex.Lock()
	defer fake.createStackMutex.Unlock()
	fake.CreateStackStub = stub
}

func (fake *FakeClient) CreateStackArgsForCall(i int) (context.Context, string, string, sqs.QueueParams) {
	fake.createStackMutex.RLock()
	defer fake.createStackMutex.RUnlock()
	argsForCall := fake.createStackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeClient) CreateStackReturns(result1 error) {
	fake.createStackMutex.Lock()
	defer fake.createStackMutex.Unlock()
	fake.CreateStackStub = nil
	fake.createStackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CreateStackReturnsOnCall(i int, result1 error) {
	fake.createStackMutex.Lock()
	defer fake.createStackMutex.Unlock()
	fake.CreateStackStub = nil
	if fake.createStackReturnsOnCall == nil {
		fake.createStackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createStackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteStack(arg1 context.Context, arg2 string) error {
	fake.deleteStackMutex.Lock()
	ret, specificReturn := fake.deleteStackReturnsOnCall[len(fake.deleteStackArgsForCall)]
	fake.deleteStackArgsForCall = append(fake.deleteStackArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteStack", []interface{}{arg1, arg2})
	fake.deleteStackMutex.Unlock()
	if fake.DeleteStackStub != nil {
		return fake.DeleteStackStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteStackReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteStackCallCount() int {
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	return len(fake.deleteStackArgsForCall)
}

func (fake *FakeClient) DeleteStackCalls(stub func(context.Context, string) error) {
	fake.deleteStackMutex.Lock()
	defer fake.deleteStackMutex.Unlock()
	fake.DeleteStackStub = stub
}

func (fake *FakeClient) DeleteStackArgsForCall(i int) (context.Context, string) {
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	argsForCall := fake.deleteStackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) DeleteStackReturns(result1 error) {
	fake.deleteStackMutex.Lock()
	defer fake.deleteStackMutex.Unlock()
	fake.DeleteStackStub = nil
	fake.deleteStackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteStackReturnsOnCall(i int, result1 error) {
	fake.deleteStackMutex.Lock()
	defer fake.deleteStackMutex.Unlock()
	fake.DeleteStackStub = nil
	if fake.deleteStackReturnsOnCall == nil {
		fake.deleteStackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteStackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetStackStatus(arg1 context.Context, arg2 string) (string, error) {
	fake.getStackStatusMutex.Lock()
	ret, specificReturn := fake.getStackStatusReturnsOnCall[len(fake.getStackStatusArgsForCall)]
	fake.getStackStatusArgsForCall = append(fake.getStackStatusArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetStackStatus", []interface{}{arg1, arg2})
	fake.getStackStatusMutex.Unlock()
	if fake.GetStackStatusStub != nil {
		return fake.GetStackStatusStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getStackStatusReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetStackStatusCallCount() int {
	fake.getStackStatusMutex.RLock()
	defer fake.getStackStatusMutex.RUnlock()
	return len(fake.getStackStatusArgsForCall)
}

func (fake *FakeClient) GetStackStatusCalls(stub func(context.Context, string) (string, error)) {
	fake.getStackStatusMutex.Lock()
	defer fake.getStackStatusMutex.Unlock()
	fake.GetStackStatusStub = stub
}

func (fake *FakeClient) GetStackStatusArgsForCall(i int) (context.Context, string) {
	fake.getStackStatusMutex.RLock()
	defer fake.getStackStatusMutex.RUnlock()
	argsForCall := fake.getStackStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetStackStatusReturns(result1 string, result2 error) {
	fake.getStackStatusMutex.Lock()
	defer fake.getStackStatusMutex.Unlock()
	fake.GetStackStatusStub = nil
	fake.getStackStatusReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetStackStatusReturnsOnCall(i int, result1 string, result2 error) {
	fake.getStackStatusMutex.Lock()
	defer fake.getStackStatusMutex.Unlock()
	fake.GetStackStatusStub = nil
	if fake.getStackStatusReturnsOnCall == nil {
		fake.getStackStatusReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getStackStatusReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createStackMutex.RLock()
	defer fake.createStackMutex.RUnlock()
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	fake.getStackStatusMutex.RLock()
	defer fake.getStackStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqs.Client = new(FakeClient)
