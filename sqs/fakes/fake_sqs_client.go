// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/alphagov/paas-sqs-broker/sqs"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudformation"
)

type FakeClient struct {
	CreateStackWithContextStub        func(context.Context, *cloudformation.CreateStackInput, ...request.Option) (*cloudformation.CreateStackOutput, error)
	createStackWithContextMutex       sync.RWMutex
	createStackWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudformation.CreateStackInput
		arg3 []request.Option
	}
	createStackWithContextReturns struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}
	createStackWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}
	DeleteStackStub        func(context.Context, string) error
	deleteStackMutex       sync.RWMutex
	deleteStackArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteStackReturns struct {
		result1 error
	}
	deleteStackReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeStacksWithContextStub        func(context.Context, *cloudformation.DescribeStacksInput, ...request.Option) (*cloudformation.DescribeStacksOutput, error)
	describeStacksWithContextMutex       sync.RWMutex
	describeStacksWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.Option
	}
	describeStacksWithContextReturns struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}
	describeStacksWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}
	UpdateStackWithContextStub        func(context.Context, *cloudformation.UpdateStackInput, ...request.Option) (*cloudformation.UpdateStackOutput, error)
	updateStackWithContextMutex       sync.RWMutex
	updateStackWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudformation.UpdateStackInput
		arg3 []request.Option
	}
	updateStackWithContextReturns struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}
	updateStackWithContextReturnsOnCall map[int]struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CreateStackWithContext(arg1 context.Context, arg2 *cloudformation.CreateStackInput, arg3 ...request.Option) (*cloudformation.CreateStackOutput, error) {
	fake.createStackWithContextMutex.Lock()
	ret, specificReturn := fake.createStackWithContextReturnsOnCall[len(fake.createStackWithContextArgsForCall)]
	fake.createStackWithContextArgsForCall = append(fake.createStackWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudformation.CreateStackInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateStackWithContext", []interface{}{arg1, arg2, arg3})
	fake.createStackWithContextMutex.Unlock()
	if fake.CreateStackWithContextStub != nil {
		return fake.CreateStackWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createStackWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateStackWithContextCallCount() int {
	fake.createStackWithContextMutex.RLock()
	defer fake.createStackWithContextMutex.RUnlock()
	return len(fake.createStackWithContextArgsForCall)
}

func (fake *FakeClient) CreateStackWithContextCalls(stub func(context.Context, *cloudformation.CreateStackInput, ...request.Option) (*cloudformation.CreateStackOutput, error)) {
	fake.createStackWithContextMutex.Lock()
	defer fake.createStackWithContextMutex.Unlock()
	fake.CreateStackWithContextStub = stub
}

func (fake *FakeClient) CreateStackWithContextArgsForCall(i int) (context.Context, *cloudformation.CreateStackInput, []request.Option) {
	fake.createStackWithContextMutex.RLock()
	defer fake.createStackWithContextMutex.RUnlock()
	argsForCall := fake.createStackWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) CreateStackWithContextReturns(result1 *cloudformation.CreateStackOutput, result2 error) {
	fake.createStackWithContextMutex.Lock()
	defer fake.createStackWithContextMutex.Unlock()
	fake.CreateStackWithContextStub = nil
	fake.createStackWithContextReturns = struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateStackWithContextReturnsOnCall(i int, result1 *cloudformation.CreateStackOutput, result2 error) {
	fake.createStackWithContextMutex.Lock()
	defer fake.createStackWithContextMutex.Unlock()
	fake.CreateStackWithContextStub = nil
	if fake.createStackWithContextReturnsOnCall == nil {
		fake.createStackWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.CreateStackOutput
			result2 error
		})
	}
	fake.createStackWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.CreateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteStack(arg1 context.Context, arg2 string) error {
	fake.deleteStackMutex.Lock()
	ret, specificReturn := fake.deleteStackReturnsOnCall[len(fake.deleteStackArgsForCall)]
	fake.deleteStackArgsForCall = append(fake.deleteStackArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteStack", []interface{}{arg1, arg2})
	fake.deleteStackMutex.Unlock()
	if fake.DeleteStackStub != nil {
		return fake.DeleteStackStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteStackReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteStackCallCount() int {
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	return len(fake.deleteStackArgsForCall)
}

func (fake *FakeClient) DeleteStackCalls(stub func(context.Context, string) error) {
	fake.deleteStackMutex.Lock()
	defer fake.deleteStackMutex.Unlock()
	fake.DeleteStackStub = stub
}

func (fake *FakeClient) DeleteStackArgsForCall(i int) (context.Context, string) {
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	argsForCall := fake.deleteStackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) DeleteStackReturns(result1 error) {
	fake.deleteStackMutex.Lock()
	defer fake.deleteStackMutex.Unlock()
	fake.DeleteStackStub = nil
	fake.deleteStackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteStackReturnsOnCall(i int, result1 error) {
	fake.deleteStackMutex.Lock()
	defer fake.deleteStackMutex.Unlock()
	fake.DeleteStackStub = nil
	if fake.deleteStackReturnsOnCall == nil {
		fake.deleteStackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteStackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DescribeStacksWithContext(arg1 context.Context, arg2 *cloudformation.DescribeStacksInput, arg3 ...request.Option) (*cloudformation.DescribeStacksOutput, error) {
	fake.describeStacksWithContextMutex.Lock()
	ret, specificReturn := fake.describeStacksWithContextReturnsOnCall[len(fake.describeStacksWithContextArgsForCall)]
	fake.describeStacksWithContextArgsForCall = append(fake.describeStacksWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudformation.DescribeStacksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeStacksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeStacksWithContextMutex.Unlock()
	if fake.DescribeStacksWithContextStub != nil {
		return fake.DescribeStacksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeStacksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) DescribeStacksWithContextCallCount() int {
	fake.describeStacksWithContextMutex.RLock()
	defer fake.describeStacksWithContextMutex.RUnlock()
	return len(fake.describeStacksWithContextArgsForCall)
}

func (fake *FakeClient) DescribeStacksWithContextCalls(stub func(context.Context, *cloudformation.DescribeStacksInput, ...request.Option) (*cloudformation.DescribeStacksOutput, error)) {
	fake.describeStacksWithContextMutex.Lock()
	defer fake.describeStacksWithContextMutex.Unlock()
	fake.DescribeStacksWithContextStub = stub
}

func (fake *FakeClient) DescribeStacksWithContextArgsForCall(i int) (context.Context, *cloudformation.DescribeStacksInput, []request.Option) {
	fake.describeStacksWithContextMutex.RLock()
	defer fake.describeStacksWithContextMutex.RUnlock()
	argsForCall := fake.describeStacksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) DescribeStacksWithContextReturns(result1 *cloudformation.DescribeStacksOutput, result2 error) {
	fake.describeStacksWithContextMutex.Lock()
	defer fake.describeStacksWithContextMutex.Unlock()
	fake.DescribeStacksWithContextStub = nil
	fake.describeStacksWithContextReturns = struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DescribeStacksWithContextReturnsOnCall(i int, result1 *cloudformation.DescribeStacksOutput, result2 error) {
	fake.describeStacksWithContextMutex.Lock()
	defer fake.describeStacksWithContextMutex.Unlock()
	fake.DescribeStacksWithContextStub = nil
	if fake.describeStacksWithContextReturnsOnCall == nil {
		fake.describeStacksWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.DescribeStacksOutput
			result2 error
		})
	}
	fake.describeStacksWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.DescribeStacksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateStackWithContext(arg1 context.Context, arg2 *cloudformation.UpdateStackInput, arg3 ...request.Option) (*cloudformation.UpdateStackOutput, error) {
	fake.updateStackWithContextMutex.Lock()
	ret, specificReturn := fake.updateStackWithContextReturnsOnCall[len(fake.updateStackWithContextArgsForCall)]
	fake.updateStackWithContextArgsForCall = append(fake.updateStackWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudformation.UpdateStackInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateStackWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateStackWithContextMutex.Unlock()
	if fake.UpdateStackWithContextStub != nil {
		return fake.UpdateStackWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateStackWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) UpdateStackWithContextCallCount() int {
	fake.updateStackWithContextMutex.RLock()
	defer fake.updateStackWithContextMutex.RUnlock()
	return len(fake.updateStackWithContextArgsForCall)
}

func (fake *FakeClient) UpdateStackWithContextCalls(stub func(context.Context, *cloudformation.UpdateStackInput, ...request.Option) (*cloudformation.UpdateStackOutput, error)) {
	fake.updateStackWithContextMutex.Lock()
	defer fake.updateStackWithContextMutex.Unlock()
	fake.UpdateStackWithContextStub = stub
}

func (fake *FakeClient) UpdateStackWithContextArgsForCall(i int) (context.Context, *cloudformation.UpdateStackInput, []request.Option) {
	fake.updateStackWithContextMutex.RLock()
	defer fake.updateStackWithContextMutex.RUnlock()
	argsForCall := fake.updateStackWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) UpdateStackWithContextReturns(result1 *cloudformation.UpdateStackOutput, result2 error) {
	fake.updateStackWithContextMutex.Lock()
	defer fake.updateStackWithContextMutex.Unlock()
	fake.UpdateStackWithContextStub = nil
	fake.updateStackWithContextReturns = struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateStackWithContextReturnsOnCall(i int, result1 *cloudformation.UpdateStackOutput, result2 error) {
	fake.updateStackWithContextMutex.Lock()
	defer fake.updateStackWithContextMutex.Unlock()
	fake.UpdateStackWithContextStub = nil
	if fake.updateStackWithContextReturnsOnCall == nil {
		fake.updateStackWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudformation.UpdateStackOutput
			result2 error
		})
	}
	fake.updateStackWithContextReturnsOnCall[i] = struct {
		result1 *cloudformation.UpdateStackOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createStackWithContextMutex.RLock()
	defer fake.createStackWithContextMutex.RUnlock()
	fake.deleteStackMutex.RLock()
	defer fake.deleteStackMutex.RUnlock()
	fake.describeStacksWithContextMutex.RLock()
	defer fake.describeStacksWithContextMutex.RUnlock()
	fake.updateStackWithContextMutex.RLock()
	defer fake.updateStackWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ sqs.Client = new(FakeClient)
